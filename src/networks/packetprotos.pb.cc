// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packetprotos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packetprotos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenderedObj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenderedObj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipInitPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipInitPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjsAndEventsPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjsAndEventsPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventAckPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventAckPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlInputPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlInputPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packetprotos_2eproto() {
  protobuf_AddDesc_packetprotos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packetprotos.proto");
  GOOGLE_CHECK(file != NULL);
  vector_descriptor_ = file->message_type(0);
  static const int vector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector, z_),
  };
  vector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vector_descriptor_,
      vector::default_instance_,
      vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vector));
  RenderedObj_descriptor_ = file->message_type(1);
  static const int RenderedObj_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, cur_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, max_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, is_destroyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, weapon_index_),
  };
  RenderedObj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenderedObj_descriptor_,
      RenderedObj::default_instance_,
      RenderedObj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenderedObj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenderedObj));
  Event_descriptor_ = file->message_type(2);
  static const int Event_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_type_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  ControlInput_descriptor_ = file->message_type(3);
  static const int ControlInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlInput, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlInput, tilt_),
  };
  ControlInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlInput_descriptor_,
      ControlInput::default_instance_,
      ControlInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlInput));
  GeneralPacket_descriptor_ = file->message_type(4);
  static const int GeneralPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralPacket, packettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralPacket, packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralPacket, packetid_),
  };
  GeneralPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeneralPacket_descriptor_,
      GeneralPacket::default_instance_,
      GeneralPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeneralPacket));
  ShipInitPacket_descriptor_ = file->message_type(5);
  static const int ShipInitPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInitPacket, ship_),
  };
  ShipInitPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipInitPacket_descriptor_,
      ShipInitPacket::default_instance_,
      ShipInitPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInitPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInitPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipInitPacket));
  ObjsAndEventsPacket_descriptor_ = file->message_type(6);
  static const int ObjsAndEventsPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjsAndEventsPacket, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjsAndEventsPacket, event_),
  };
  ObjsAndEventsPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjsAndEventsPacket_descriptor_,
      ObjsAndEventsPacket::default_instance_,
      ObjsAndEventsPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjsAndEventsPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjsAndEventsPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjsAndEventsPacket));
  EventAckPacket_descriptor_ = file->message_type(7);
  static const int EventAckPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAckPacket, ack_),
  };
  EventAckPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventAckPacket_descriptor_,
      EventAckPacket::default_instance_,
      EventAckPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAckPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAckPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventAckPacket));
  ControlInputPacket_descriptor_ = file->message_type(8);
  static const int ControlInputPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlInputPacket, control_),
  };
  ControlInputPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlInputPacket_descriptor_,
      ControlInputPacket::default_instance_,
      ControlInputPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlInputPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlInputPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlInputPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packetprotos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vector_descriptor_, &vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenderedObj_descriptor_, &RenderedObj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlInput_descriptor_, &ControlInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeneralPacket_descriptor_, &GeneralPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipInitPacket_descriptor_, &ShipInitPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjsAndEventsPacket_descriptor_, &ObjsAndEventsPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventAckPacket_descriptor_, &EventAckPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlInputPacket_descriptor_, &ControlInputPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packetprotos_2eproto() {
  delete vector::default_instance_;
  delete vector_reflection_;
  delete RenderedObj::default_instance_;
  delete RenderedObj_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete ControlInput::default_instance_;
  delete ControlInput_reflection_;
  delete GeneralPacket::default_instance_;
  delete GeneralPacket_reflection_;
  delete ShipInitPacket::default_instance_;
  delete ShipInitPacket_reflection_;
  delete ObjsAndEventsPacket::default_instance_;
  delete ObjsAndEventsPacket_reflection_;
  delete EventAckPacket::default_instance_;
  delete EventAckPacket_reflection_;
  delete ControlInputPacket::default_instance_;
  delete ControlInputPacket_reflection_;
}

void protobuf_AddDesc_packetprotos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022packetprotos.proto\022\006protos\")\n\006vector\022\t"
    "\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\262\002\n\013Rend"
    "eredObj\022\n\n\002id\030\001 \002(\r\022\014\n\004mass\030\002 \002(\r\022\014\n\004typ"
    "e\030\003 \002(\r\022\025\n\rcur_tolerance\030\004 \002(\002\022\025\n\rmax_to"
    "lerance\030\005 \002(\002\022\024\n\014is_destroyed\030\006 \002(\r\022\033\n\003p"
    "os\030\007 \002(\0132\016.protos.vector\022\033\n\003vel\030\010 \002(\0132\016."
    "protos.vector\022\r\n\005accel\030\t \002(\002\022\035\n\005pitch\030\n "
    "\002(\0132\016.protos.vector\022\034\n\004roll\030\013 \002(\0132\016.prot"
    "os.vector\022\033\n\003yaw\030\014 \002(\0132\016.protos.vector\022\024"
    "\n\014weapon_index\030\r \001(\r\"\033\n\005Event\022\022\n\nevent_t"
    "ype\030\001 \002(\r\",\n\014ControlInput\022\016\n\006action\030\001 \002("
    "\r\022\014\n\004tilt\030\002 \001(\002\"E\n\rGeneralPacket\022\022\n\npack"
    "etType\030\001 \002(\r\022\016\n\006packet\030\002 \001(\014\022\020\n\010packetId"
    "\030\003 \001(\t\"3\n\016ShipInitPacket\022!\n\004ship\030\001 \002(\0132\023"
    ".protos.RenderedObj\"U\n\023ObjsAndEventsPack"
    "et\022 \n\003obj\030\001 \003(\0132\023.protos.RenderedObj\022\034\n\005"
    "event\030\002 \003(\0132\r.protos.Event\"\035\n\016EventAckPa"
    "cket\022\013\n\003ack\030\001 \002(\r\";\n\022ControlInputPacket\022"
    "%\n\007control\030\001 \002(\0132\024.protos.ControlInput", 758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packetprotos.proto", &protobuf_RegisterTypes);
  vector::default_instance_ = new vector();
  RenderedObj::default_instance_ = new RenderedObj();
  Event::default_instance_ = new Event();
  ControlInput::default_instance_ = new ControlInput();
  GeneralPacket::default_instance_ = new GeneralPacket();
  ShipInitPacket::default_instance_ = new ShipInitPacket();
  ObjsAndEventsPacket::default_instance_ = new ObjsAndEventsPacket();
  EventAckPacket::default_instance_ = new EventAckPacket();
  ControlInputPacket::default_instance_ = new ControlInputPacket();
  vector::default_instance_->InitAsDefaultInstance();
  RenderedObj::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ControlInput::default_instance_->InitAsDefaultInstance();
  GeneralPacket::default_instance_->InitAsDefaultInstance();
  ShipInitPacket::default_instance_->InitAsDefaultInstance();
  ObjsAndEventsPacket::default_instance_->InitAsDefaultInstance();
  EventAckPacket::default_instance_->InitAsDefaultInstance();
  ControlInputPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packetprotos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packetprotos_2eproto {
  StaticDescriptorInitializer_packetprotos_2eproto() {
    protobuf_AddDesc_packetprotos_2eproto();
  }
} static_descriptor_initializer_packetprotos_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int vector::kXFieldNumber;
const int vector::kYFieldNumber;
const int vector::kZFieldNumber;
#endif  // !_MSC_VER

vector::vector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vector::InitAsDefaultInstance() {
}

vector::vector(const vector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vector::~vector() {
  SharedDtor();
}

void vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vector_descriptor_;
}

const vector& vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

vector* vector::default_instance_ = NULL;

vector* vector::New() const {
  return new vector;
}

void vector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vector::MergeFrom(const vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vector::CopyFrom(const vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void vector::Swap(vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vector_descriptor_;
  metadata.reflection = vector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenderedObj::kIdFieldNumber;
const int RenderedObj::kMassFieldNumber;
const int RenderedObj::kTypeFieldNumber;
const int RenderedObj::kCurToleranceFieldNumber;
const int RenderedObj::kMaxToleranceFieldNumber;
const int RenderedObj::kIsDestroyedFieldNumber;
const int RenderedObj::kPosFieldNumber;
const int RenderedObj::kVelFieldNumber;
const int RenderedObj::kAccelFieldNumber;
const int RenderedObj::kPitchFieldNumber;
const int RenderedObj::kRollFieldNumber;
const int RenderedObj::kYawFieldNumber;
const int RenderedObj::kWeaponIndexFieldNumber;
#endif  // !_MSC_VER

RenderedObj::RenderedObj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenderedObj::InitAsDefaultInstance() {
  pos_ = const_cast< ::protos::vector*>(&::protos::vector::default_instance());
  vel_ = const_cast< ::protos::vector*>(&::protos::vector::default_instance());
  pitch_ = const_cast< ::protos::vector*>(&::protos::vector::default_instance());
  roll_ = const_cast< ::protos::vector*>(&::protos::vector::default_instance());
  yaw_ = const_cast< ::protos::vector*>(&::protos::vector::default_instance());
}

RenderedObj::RenderedObj(const RenderedObj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenderedObj::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  mass_ = 0u;
  type_ = 0u;
  cur_tolerance_ = 0;
  max_tolerance_ = 0;
  is_destroyed_ = 0u;
  pos_ = NULL;
  vel_ = NULL;
  accel_ = 0;
  pitch_ = NULL;
  roll_ = NULL;
  yaw_ = NULL;
  weapon_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenderedObj::~RenderedObj() {
  SharedDtor();
}

void RenderedObj::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete vel_;
    delete pitch_;
    delete roll_;
    delete yaw_;
  }
}

void RenderedObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenderedObj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenderedObj_descriptor_;
}

const RenderedObj& RenderedObj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

RenderedObj* RenderedObj::default_instance_ = NULL;

RenderedObj* RenderedObj::New() const {
  return new RenderedObj;
}

void RenderedObj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    mass_ = 0u;
    type_ = 0u;
    cur_tolerance_ = 0;
    max_tolerance_ = 0;
    is_destroyed_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::protos::vector::Clear();
    }
    if (has_vel()) {
      if (vel_ != NULL) vel_->::protos::vector::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accel_ = 0;
    if (has_pitch()) {
      if (pitch_ != NULL) pitch_->::protos::vector::Clear();
    }
    if (has_roll()) {
      if (roll_ != NULL) roll_->::protos::vector::Clear();
    }
    if (has_yaw()) {
      if (yaw_ != NULL) yaw_->::protos::vector::Clear();
    }
    weapon_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenderedObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mass;
        break;
      }

      // required uint32 mass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_cur_tolerance;
        break;
      }

      // required float cur_tolerance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cur_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_tolerance_)));
          set_has_cur_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_max_tolerance;
        break;
      }

      // required float max_tolerance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_tolerance_)));
          set_has_max_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_destroyed;
        break;
      }

      // required uint32 is_destroyed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_destroyed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_destroyed_)));
          set_has_is_destroyed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pos;
        break;
      }

      // required .protos.vector pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vel;
        break;
      }

      // required .protos.vector vel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_accel;
        break;
      }

      // required float accel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_)));
          set_has_accel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pitch;
        break;
      }

      // required .protos.vector pitch = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pitch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pitch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_roll;
        break;
      }

      // required .protos.vector roll = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_yaw;
        break;
      }

      // required .protos.vector yaw = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yaw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yaw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weapon_index;
        break;
      }

      // optional uint32 weapon_index = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_index_)));
          set_has_weapon_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenderedObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 mass = 2;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mass(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required float cur_tolerance = 4;
  if (has_cur_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cur_tolerance(), output);
  }

  // required float max_tolerance = 5;
  if (has_max_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_tolerance(), output);
  }

  // required uint32 is_destroyed = 6;
  if (has_is_destroyed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_destroyed(), output);
  }

  // required .protos.vector pos = 7;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pos(), output);
  }

  // required .protos.vector vel = 8;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vel(), output);
  }

  // required float accel = 9;
  if (has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->accel(), output);
  }

  // required .protos.vector pitch = 10;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pitch(), output);
  }

  // required .protos.vector roll = 11;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->roll(), output);
  }

  // required .protos.vector yaw = 12;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->yaw(), output);
  }

  // optional uint32 weapon_index = 13;
  if (has_weapon_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weapon_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenderedObj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 mass = 2;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mass(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required float cur_tolerance = 4;
  if (has_cur_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cur_tolerance(), target);
  }

  // required float max_tolerance = 5;
  if (has_max_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_tolerance(), target);
  }

  // required uint32 is_destroyed = 6;
  if (has_is_destroyed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_destroyed(), target);
  }

  // required .protos.vector pos = 7;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pos(), target);
  }

  // required .protos.vector vel = 8;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vel(), target);
  }

  // required float accel = 9;
  if (has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->accel(), target);
  }

  // required .protos.vector pitch = 10;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pitch(), target);
  }

  // required .protos.vector roll = 11;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->roll(), target);
  }

  // required .protos.vector yaw = 12;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->yaw(), target);
  }

  // optional uint32 weapon_index = 13;
  if (has_weapon_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weapon_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenderedObj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 mass = 2;
    if (has_mass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mass());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required float cur_tolerance = 4;
    if (has_cur_tolerance()) {
      total_size += 1 + 4;
    }

    // required float max_tolerance = 5;
    if (has_max_tolerance()) {
      total_size += 1 + 4;
    }

    // required uint32 is_destroyed = 6;
    if (has_is_destroyed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_destroyed());
    }

    // required .protos.vector pos = 7;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required .protos.vector vel = 8;
    if (has_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float accel = 9;
    if (has_accel()) {
      total_size += 1 + 4;
    }

    // required .protos.vector pitch = 10;
    if (has_pitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pitch());
    }

    // required .protos.vector roll = 11;
    if (has_roll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roll());
    }

    // required .protos.vector yaw = 12;
    if (has_yaw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yaw());
    }

    // optional uint32 weapon_index = 13;
    if (has_weapon_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenderedObj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenderedObj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenderedObj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenderedObj::MergeFrom(const RenderedObj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cur_tolerance()) {
      set_cur_tolerance(from.cur_tolerance());
    }
    if (from.has_max_tolerance()) {
      set_max_tolerance(from.max_tolerance());
    }
    if (from.has_is_destroyed()) {
      set_is_destroyed(from.is_destroyed());
    }
    if (from.has_pos()) {
      mutable_pos()->::protos::vector::MergeFrom(from.pos());
    }
    if (from.has_vel()) {
      mutable_vel()->::protos::vector::MergeFrom(from.vel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accel()) {
      set_accel(from.accel());
    }
    if (from.has_pitch()) {
      mutable_pitch()->::protos::vector::MergeFrom(from.pitch());
    }
    if (from.has_roll()) {
      mutable_roll()->::protos::vector::MergeFrom(from.roll());
    }
    if (from.has_yaw()) {
      mutable_yaw()->::protos::vector::MergeFrom(from.yaw());
    }
    if (from.has_weapon_index()) {
      set_weapon_index(from.weapon_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenderedObj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderedObj::CopyFrom(const RenderedObj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderedObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel().IsInitialized()) return false;
  }
  if (has_pitch()) {
    if (!this->pitch().IsInitialized()) return false;
  }
  if (has_roll()) {
    if (!this->roll().IsInitialized()) return false;
  }
  if (has_yaw()) {
    if (!this->yaw().IsInitialized()) return false;
  }
  return true;
}

void RenderedObj::Swap(RenderedObj* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mass_, other->mass_);
    std::swap(type_, other->type_);
    std::swap(cur_tolerance_, other->cur_tolerance_);
    std::swap(max_tolerance_, other->max_tolerance_);
    std::swap(is_destroyed_, other->is_destroyed_);
    std::swap(pos_, other->pos_);
    std::swap(vel_, other->vel_);
    std::swap(accel_, other->accel_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(yaw_, other->yaw_);
    std::swap(weapon_index_, other->weapon_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenderedObj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenderedObj_descriptor_;
  metadata.reflection = RenderedObj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kEventTypeFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ControlInput::kActionFieldNumber;
const int ControlInput::kTiltFieldNumber;
#endif  // !_MSC_VER

ControlInput::ControlInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlInput::InitAsDefaultInstance() {
}

ControlInput::ControlInput(const ControlInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlInput::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0u;
  tilt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlInput::~ControlInput() {
  SharedDtor();
}

void ControlInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlInput_descriptor_;
}

const ControlInput& ControlInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

ControlInput* ControlInput::default_instance_ = NULL;

ControlInput* ControlInput::New() const {
  return new ControlInput;
}

void ControlInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0u;
    tilt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_tilt;
        break;
      }

      // optional float tilt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tilt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tilt_)));
          set_has_tilt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action(), output);
  }

  // optional float tilt = 2;
  if (has_tilt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tilt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action(), target);
  }

  // optional float tilt = 2;
  if (has_tilt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tilt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional float tilt = 2;
    if (has_tilt()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlInput::MergeFrom(const ControlInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_tilt()) {
      set_tilt(from.tilt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlInput::CopyFrom(const ControlInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ControlInput::Swap(ControlInput* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(tilt_, other->tilt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlInput_descriptor_;
  metadata.reflection = ControlInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeneralPacket::kPacketTypeFieldNumber;
const int GeneralPacket::kPacketFieldNumber;
const int GeneralPacket::kPacketIdFieldNumber;
#endif  // !_MSC_VER

GeneralPacket::GeneralPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeneralPacket::InitAsDefaultInstance() {
}

GeneralPacket::GeneralPacket(const GeneralPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeneralPacket::SharedCtor() {
  _cached_size_ = 0;
  packettype_ = 0u;
  packet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralPacket::~GeneralPacket() {
  SharedDtor();
}

void GeneralPacket::SharedDtor() {
  if (packet_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_;
  }
  if (packetid_ != &::google::protobuf::internal::kEmptyString) {
    delete packetid_;
  }
  if (this != default_instance_) {
  }
}

void GeneralPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralPacket_descriptor_;
}

const GeneralPacket& GeneralPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

GeneralPacket* GeneralPacket::default_instance_ = NULL;

GeneralPacket* GeneralPacket::New() const {
  return new GeneralPacket;
}

void GeneralPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packettype_ = 0u;
    if (has_packet()) {
      if (packet_ != &::google::protobuf::internal::kEmptyString) {
        packet_->clear();
      }
    }
    if (has_packetid()) {
      if (packetid_ != &::google::protobuf::internal::kEmptyString) {
        packetid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeneralPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 packetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packettype_)));
          set_has_packettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_packet;
        break;
      }

      // optional bytes packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packetId;
        break;
      }

      // optional string packetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packetId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packetid().data(), this->packetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeneralPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 packetType = 1;
  if (has_packettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packettype(), output);
  }

  // optional bytes packet = 2;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->packet(), output);
  }

  // optional string packetId = 3;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->packetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeneralPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 packetType = 1;
  if (has_packettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packettype(), target);
  }

  // optional bytes packet = 2;
  if (has_packet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->packet(), target);
  }

  // optional string packetId = 3;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->packetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeneralPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 packetType = 1;
    if (has_packettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packettype());
    }

    // optional bytes packet = 2;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet());
    }

    // optional string packetId = 3;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeneralPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeneralPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeneralPacket::MergeFrom(const GeneralPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packettype()) {
      set_packettype(from.packettype());
    }
    if (from.has_packet()) {
      set_packet(from.packet());
    }
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeneralPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralPacket::CopyFrom(const GeneralPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GeneralPacket::Swap(GeneralPacket* other) {
  if (other != this) {
    std::swap(packettype_, other->packettype_);
    std::swap(packet_, other->packet_);
    std::swap(packetid_, other->packetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeneralPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralPacket_descriptor_;
  metadata.reflection = GeneralPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipInitPacket::kShipFieldNumber;
#endif  // !_MSC_VER

ShipInitPacket::ShipInitPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipInitPacket::InitAsDefaultInstance() {
  ship_ = const_cast< ::protos::RenderedObj*>(&::protos::RenderedObj::default_instance());
}

ShipInitPacket::ShipInitPacket(const ShipInitPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipInitPacket::SharedCtor() {
  _cached_size_ = 0;
  ship_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipInitPacket::~ShipInitPacket() {
  SharedDtor();
}

void ShipInitPacket::SharedDtor() {
  if (this != default_instance_) {
    delete ship_;
  }
}

void ShipInitPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipInitPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipInitPacket_descriptor_;
}

const ShipInitPacket& ShipInitPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

ShipInitPacket* ShipInitPacket::default_instance_ = NULL;

ShipInitPacket* ShipInitPacket::New() const {
  return new ShipInitPacket;
}

void ShipInitPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ship()) {
      if (ship_ != NULL) ship_->::protos::RenderedObj::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipInitPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protos.RenderedObj ship = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ship()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipInitPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protos.RenderedObj ship = 1;
  if (has_ship()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ship(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipInitPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protos.RenderedObj ship = 1;
  if (has_ship()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ship(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipInitPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protos.RenderedObj ship = 1;
    if (has_ship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ship());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipInitPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipInitPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipInitPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipInitPacket::MergeFrom(const ShipInitPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship()) {
      mutable_ship()->::protos::RenderedObj::MergeFrom(from.ship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipInitPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipInitPacket::CopyFrom(const ShipInitPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipInitPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ship()) {
    if (!this->ship().IsInitialized()) return false;
  }
  return true;
}

void ShipInitPacket::Swap(ShipInitPacket* other) {
  if (other != this) {
    std::swap(ship_, other->ship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipInitPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipInitPacket_descriptor_;
  metadata.reflection = ShipInitPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjsAndEventsPacket::kObjFieldNumber;
const int ObjsAndEventsPacket::kEventFieldNumber;
#endif  // !_MSC_VER

ObjsAndEventsPacket::ObjsAndEventsPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjsAndEventsPacket::InitAsDefaultInstance() {
}

ObjsAndEventsPacket::ObjsAndEventsPacket(const ObjsAndEventsPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjsAndEventsPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjsAndEventsPacket::~ObjsAndEventsPacket() {
  SharedDtor();
}

void ObjsAndEventsPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjsAndEventsPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjsAndEventsPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjsAndEventsPacket_descriptor_;
}

const ObjsAndEventsPacket& ObjsAndEventsPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

ObjsAndEventsPacket* ObjsAndEventsPacket::default_instance_ = NULL;

ObjsAndEventsPacket* ObjsAndEventsPacket::New() const {
  return new ObjsAndEventsPacket;
}

void ObjsAndEventsPacket::Clear() {
  obj_.Clear();
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjsAndEventsPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.RenderedObj obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_obj;
        if (input->ExpectTag(18)) goto parse_event;
        break;
      }

      // repeated .protos.Event event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjsAndEventsPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.RenderedObj obj = 1;
  for (int i = 0; i < this->obj_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obj(i), output);
  }

  // repeated .protos.Event event = 2;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjsAndEventsPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.RenderedObj obj = 1;
  for (int i = 0; i < this->obj_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obj(i), target);
  }

  // repeated .protos.Event event = 2;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjsAndEventsPacket::ByteSize() const {
  int total_size = 0;

  // repeated .protos.RenderedObj obj = 1;
  total_size += 1 * this->obj_size();
  for (int i = 0; i < this->obj_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obj(i));
  }

  // repeated .protos.Event event = 2;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjsAndEventsPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjsAndEventsPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjsAndEventsPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjsAndEventsPacket::MergeFrom(const ObjsAndEventsPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  obj_.MergeFrom(from.obj_);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjsAndEventsPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjsAndEventsPacket::CopyFrom(const ObjsAndEventsPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjsAndEventsPacket::IsInitialized() const {

  for (int i = 0; i < obj_size(); i++) {
    if (!this->obj(i).IsInitialized()) return false;
  }
  for (int i = 0; i < event_size(); i++) {
    if (!this->event(i).IsInitialized()) return false;
  }
  return true;
}

void ObjsAndEventsPacket::Swap(ObjsAndEventsPacket* other) {
  if (other != this) {
    obj_.Swap(&other->obj_);
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjsAndEventsPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjsAndEventsPacket_descriptor_;
  metadata.reflection = ObjsAndEventsPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventAckPacket::kAckFieldNumber;
#endif  // !_MSC_VER

EventAckPacket::EventAckPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventAckPacket::InitAsDefaultInstance() {
}

EventAckPacket::EventAckPacket(const EventAckPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventAckPacket::SharedCtor() {
  _cached_size_ = 0;
  ack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventAckPacket::~EventAckPacket() {
  SharedDtor();
}

void EventAckPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventAckPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventAckPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventAckPacket_descriptor_;
}

const EventAckPacket& EventAckPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

EventAckPacket* EventAckPacket::default_instance_ = NULL;

EventAckPacket* EventAckPacket::New() const {
  return new EventAckPacket;
}

void EventAckPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ack_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventAckPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventAckPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ack = 1;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventAckPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ack = 1;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventAckPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ack = 1;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventAckPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventAckPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventAckPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventAckPacket::MergeFrom(const EventAckPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ack()) {
      set_ack(from.ack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventAckPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventAckPacket::CopyFrom(const EventAckPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAckPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EventAckPacket::Swap(EventAckPacket* other) {
  if (other != this) {
    std::swap(ack_, other->ack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventAckPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventAckPacket_descriptor_;
  metadata.reflection = EventAckPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ControlInputPacket::kControlFieldNumber;
#endif  // !_MSC_VER

ControlInputPacket::ControlInputPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlInputPacket::InitAsDefaultInstance() {
  control_ = const_cast< ::protos::ControlInput*>(&::protos::ControlInput::default_instance());
}

ControlInputPacket::ControlInputPacket(const ControlInputPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlInputPacket::SharedCtor() {
  _cached_size_ = 0;
  control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlInputPacket::~ControlInputPacket() {
  SharedDtor();
}

void ControlInputPacket::SharedDtor() {
  if (this != default_instance_) {
    delete control_;
  }
}

void ControlInputPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlInputPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlInputPacket_descriptor_;
}

const ControlInputPacket& ControlInputPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetprotos_2eproto();
  return *default_instance_;
}

ControlInputPacket* ControlInputPacket::default_instance_ = NULL;

ControlInputPacket* ControlInputPacket::New() const {
  return new ControlInputPacket;
}

void ControlInputPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_control()) {
      if (control_ != NULL) control_->::protos::ControlInput::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlInputPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protos.ControlInput control = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlInputPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protos.ControlInput control = 1;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlInputPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protos.ControlInput control = 1;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlInputPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protos.ControlInput control = 1;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlInputPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlInputPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlInputPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlInputPacket::MergeFrom(const ControlInputPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control()) {
      mutable_control()->::protos::ControlInput::MergeFrom(from.control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlInputPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlInputPacket::CopyFrom(const ControlInputPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlInputPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  return true;
}

void ControlInputPacket::Swap(ControlInputPacket* other) {
  if (other != this) {
    std::swap(control_, other->control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlInputPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlInputPacket_descriptor_;
  metadata.reflection = ControlInputPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
